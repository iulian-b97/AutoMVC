// <auto-generated />
using AnnouncementManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnnouncementManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AnnouncementContext))]
    partial class AnnouncementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Announcement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Seller", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Car", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnnouncementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cm3")
                        .HasColumnType("int");

                    b.Property<string>("ColorBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cylinders")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gearbox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberDoors")
                        .HasColumnType("int");

                    b.Property<int>("NumberSeats")
                        .HasColumnType("int");

                    b.Property<string>("Paint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Speeds")
                        .HasColumnType("int");

                    b.Property<string>("Traction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique()
                        .HasFilter("[AnnouncementId] IS NOT NULL");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Motorcycle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnnouncementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cm3")
                        .HasColumnType("int");

                    b.Property<string>("ColorBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gearbox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique()
                        .HasFilter("[AnnouncementId] IS NOT NULL");

                    b.ToTable("Motorcycles");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Trailer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnnouncementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberDoors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique()
                        .HasFilter("[AnnouncementId] IS NOT NULL");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Truck", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnnouncementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cm3")
                        .HasColumnType("int");

                    b.Property<string>("ColorBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cylinders")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gearbox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberDoors")
                        .HasColumnType("int");

                    b.Property<int>("NumberSeats")
                        .HasColumnType("int");

                    b.Property<string>("Paint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Speeds")
                        .HasColumnType("int");

                    b.Property<string>("Traction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique()
                        .HasFilter("[AnnouncementId] IS NOT NULL");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Van", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnnouncementId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cm3")
                        .HasColumnType("int");

                    b.Property<string>("ColorBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cylinders")
                        .HasColumnType("int");

                    b.Property<string>("Gearbox")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HP")
                        .HasColumnType("int");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberDoors")
                        .HasColumnType("int");

                    b.Property<int>("NumberSeats")
                        .HasColumnType("int");

                    b.Property<string>("Paint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Speeds")
                        .HasColumnType("int");

                    b.Property<string>("Traction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId")
                        .IsUnique()
                        .HasFilter("[AnnouncementId] IS NOT NULL");

                    b.ToTable("Vans");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Announcement", b =>
                {
                    b.HasOne("AnnouncementManagement.Domain.Entities.Seller", "Seller")
                        .WithMany("Announcements")
                        .HasForeignKey("SellerId");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Car", b =>
                {
                    b.HasOne("AnnouncementManagement.Domain.Entities.Announcement", "Announcement")
                        .WithOne("Car")
                        .HasForeignKey("AnnouncementManagement.Domain.Entities.Vehicle.Car", "AnnouncementId");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Motorcycle", b =>
                {
                    b.HasOne("AnnouncementManagement.Domain.Entities.Announcement", "Announcement")
                        .WithOne("Motorcycle")
                        .HasForeignKey("AnnouncementManagement.Domain.Entities.Vehicle.Motorcycle", "AnnouncementId");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Trailer", b =>
                {
                    b.HasOne("AnnouncementManagement.Domain.Entities.Announcement", "Announcement")
                        .WithOne("Trailer")
                        .HasForeignKey("AnnouncementManagement.Domain.Entities.Vehicle.Trailer", "AnnouncementId");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Truck", b =>
                {
                    b.HasOne("AnnouncementManagement.Domain.Entities.Announcement", "Announcement")
                        .WithOne("Truck")
                        .HasForeignKey("AnnouncementManagement.Domain.Entities.Vehicle.Truck", "AnnouncementId");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Vehicle.Van", b =>
                {
                    b.HasOne("AnnouncementManagement.Domain.Entities.Announcement", "Announcement")
                        .WithOne("Van")
                        .HasForeignKey("AnnouncementManagement.Domain.Entities.Vehicle.Van", "AnnouncementId");

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Announcement", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("Motorcycle");

                    b.Navigation("Trailer");

                    b.Navigation("Truck");

                    b.Navigation("Van");
                });

            modelBuilder.Entity("AnnouncementManagement.Domain.Entities.Seller", b =>
                {
                    b.Navigation("Announcements");
                });
#pragma warning restore 612, 618
        }
    }
}
